return {
	{
		"nvim-neotest/neotest", -- Plugin ch√≠nh: framework test cho Neovim
		dependencies = {
			"nvim-neotest/nvim-nio", -- Cung c·∫•p async event loop c·∫ßn thi·∫øt cho Neotest
			"nvim-lua/plenary.nvim", -- Th∆∞ vi·ªán ti·ªán √≠ch Lua cho nhi·ªÅu plugin Neovim
			"antoinemadec/FixCursorHold.nvim", -- S·ª≠a l·ªói ch·ªù trong Vim (d√πng cho popup/log test)
			"nvim-treesitter/nvim-treesitter", -- H·ªó tr·ª£ ph√¢n t√≠ch c·∫•u tr√∫c code ƒë·ªÉ x√°c ƒë·ªãnh test

			-- Go test adapter
			{
				"fredrikaverpil/neotest-golang",
				version = "*",
				dependencies = { "leoluz/nvim-dap-go" }, -- DAP cho Go n·∫øu c·∫ßn debug
			},

			-- Dart/Flutter adapter
			"sidlatau/neotest-dart",

			-- Zig adapter
			"lawrence-laz/neotest-zig",

			-- Java adapter
			{
				"rcasia/neotest-java",
				ft = "java", -- ch·ªâ load khi m·ªü file .java
				dependencies = {
					"mfussenegger/nvim-jdtls", -- JDT Language Server cho Java
					"mfussenegger/nvim-dap", -- Debug Adapter Protocol
					"rcarriga/nvim-dap-ui", -- Giao di·ªán hi·ªÉn th·ªã debug UI
					"theHamsta/nvim-dap-virtual-text", -- Hi·ªÉn th·ªã gi√° tr·ªã bi·∫øn ngay trong code
				},
			},
		},

		config = function()
			-- Thi·∫øt l·∫≠p neotest v·ªõi c√°c adapter t∆∞∆°ng ·ª©ng cho t·ª´ng ng√¥n ng·ªØ
			require("neotest").setup({
				adapters = {
					require("neotest-golang")({ recursive_run = true }), -- H·ªó tr·ª£ ch·∫°y to√†n b·ªô test trong th∆∞ m·ª•c
					["neotest-java"] = {}, -- Java adapter
					require("neotest-dart")({
						command = "flutter", -- ho·∫∑c "fvm flutter" n·∫øu d√πng FVM
						use_lsp = true, -- d√πng LSP ƒë·ªÉ ƒë·ªçc c·∫•u tr√∫c test
						custom_test_method_names = {}, -- t√πy ch·ªânh t√™n h√†m test (n·∫øu d√πng @isTest)
					}),
					require("neotest-zig")({
						dap = {
							adapter = "lldb", -- debugger cho Zig
						},
					}),
				},
			})

			-- üß™ Keymap h·ªó tr·ª£ thao t√°c v·ªõi test
			vim.keymap.set("n", "<Leader>tr", ':lua require("neotest").run.run()<CR>', {}) -- ch·∫°y test t·∫°i v·ªã tr√≠ con tr·ªè
			vim.keymap.set("n", "<Leader>tb", ':lua require("neotest").run.run({strategy = "dap"})<CR>', {}) -- debug test
			vim.keymap.set("n", "<Leader>ts", ':lua require("neotest").run.stop()<CR>', {}) -- d·ª´ng test ƒëang ch·∫°y
			vim.keymap.set("n", "<Leader>to", ':lua require("neotest").output.open()<CR>', {}) -- m·ªü output c·ªßa test
			vim.keymap.set("n", "<Leader>tO", ':lua require("neotest").output.open({ enter = true })<CR>', {}) -- m·ªü v√† nh·∫£y t·ªõi output
			vim.keymap.set("n", "<Leader>tv", ':lua require("neotest").summary.toggle()<CR>', {}) -- toggle b·∫£ng t·ªïng quan test
			vim.keymap.set("n", "<Leader>tp", ':lua require("neotest").run.run(vim.fn.expand("%"))<CR>', {}) -- ch·∫°y to√†n b·ªô test trong file

			-- ‚ö†Ô∏è H√†m th·ªß c√¥ng ch·ªâ d√πng cho Go Suite (theo ki·ªÉu suite/method), kh√¥ng thu·ªôc neotest
			-- B·∫°n c√≥ th·ªÉ x√≥a sau n·∫øu kh√¥ng d√πng Go ki·ªÉu n√†y

			-- L·∫•y t√™n Suite trong file test Go (v√≠ d·ª•: `type MySuite struct`)
			local function get_suite_name(file_path)
				local file_content = vim.fn.readfile(file_path)
				for _, line in ipairs(file_content) do
					local suite_match = line:match("^type%s+([%w_]+)Suite%s+struct")
					if suite_match then
						return suite_match
					end
				end
				return nil
			end

			-- ‚öôÔ∏è Keymap t·ª± t·∫°o ƒë·ªÉ ch·∫°y test Go theo c√∫ ph√°p `go test -run Suite/TestFunc`
			vim.keymap.set("n", "<Leader>tt", function()
				local file_path = vim.fn.expand("%:p")
				local package = vim.fn.fnamemodify(file_path, ":h"):gsub("^%./", "")
				local test_name = vim.fn.input("Enter test method name (e.g., TestXYZ): ")

				if not test_name or test_name == "" then
					vim.notify("Test name cannot be empty.", vim.log.levels.ERROR)
					return
				end

				local suite_name = get_suite_name(file_path)
				if not suite_name then
					vim.notify("Cannot detect suite name in file.", vim.log.levels.ERROR)
					return
				end

				-- ch·∫°y test theo d·∫°ng: go test -run SuiteNameSuite/TestName
				local test_pattern = suite_name .. "Suite/" .. test_name
				vim.cmd("!go test -run " .. test_pattern .. " -v " .. package)
			end, { desc = "Run specific test at cursor" })
		end,
	},
}
